/*
 * Lexical rules for the Go! parser
 */

#include "go_tok.ah";

%%

-- White space and comments
[ \t\b\r\n]+      		-- ignore white space

"--"[ \t][^\n\r]*[\n\r]		-- line comment
"--"[\n\r]                      -- empty line comment

"/*" => <comment>        	-- continuous comment

<comment> "*/" => <initial>
<comment> .|"\n"         	-- other characters in a comment are ignored

-- identifier rule, this is just an approximation of the real rule

[a-zA-Z_][a-zA-Z_0-9]* => { ID(yyTok) }

-- number rule

[0-9]+				=>	{ IN(tok2Num(yyTok)) }
"0x"[0-9a-fA-F]+		=> 	{ IN(tok2Num(yyTok)) }
[0-9]+"."[0-9]+([eE][-+]?[0-9]+)? => 	{ FT(tok2Num(yyTok)) }
"0c"([^\\\"]|"\\"(("+"[0-9a-fA-F]+";")|[^+])) =>   { IN(char2Num(yyTok)) }

-- Character rule
"`"([^\\]|"\\"(("+"[0-9a-fA-F]+";")|[^+])) =>    { CH(tok2Chr(yyTok)) }

-- String rule
"\""([^\\\"]|"\\"(("+"[0-9a-fA-F]+";")|[^+]))*"\"" => {STR(tok2Str(yyTok))}

-- Symbol rule
"'"([^\\']|"\\"(("+"[0-9a-fA-F]+";")|[^+]))*"'" => {QUOTE(tok2Sym(yyTok))}


-- punctuation and graphic operators
"(" =>			{ LPAR }
")" =>			{ RPAR }
"[" =>			{ LBRA }
"]" =>			{ RBRA }
"{" =>			{ LBRCE}
"}" =>			{ RBRCE }
"%[" =>			{ QBRA }
"]%" =>			{ QKET }
";" =>                  { ID(yyTok) }
"," =>			{ COMMA }
",.." =>		{ CONS }
"."[ \t\b\r\n]+ =>	{ TERM }
"."eof =>               { TERM }
"." =>                  { ID(yyTok) }
"||" =>                 { ID(yyTok) }
"|" =>                  { ID(yyTok) }
"::" =>                 { ID(yyTok) }
"::=" =>                { ID(yyTok) }
":=" =>                 { ID(yyTok) }
":-" =>                 { ID(yyTok) }
":--" =>                { ID(yyTok) }
":" =>                  { ID(yyTok) }
"-->" =>                { ID(yyTok) }
"->" =>                 { ID(yyTok) }
"<~" =>                 { ID(yyTok) }
"~" =>                  { ID(yyTok) }
"^" =>                  { ID(yyTok) }
".." =>                 { ID(yyTok) }
"?" =>                  { ID(yyTok) }
"!" =>                  { ID(yyTok) }
"==" =>                 { ID(yyTok) }
"=" =>                  { ID(yyTok) }
"\\=" =>                { ID(yyTok) }
"!=" =>                 { ID(yyTok) }
"$=" =>                 { ID(yyTok) }
"$" =>                  { ID(yyTok) }
"\\+" =>                { ID(yyTok) }
"+" =>                  { ID(yyTok) }
"++" =>                 { ID(yyTok) }
"*>" =>                 { ID(yyTok) }
"**" =>                 { ID(yyTok) }
"*" =>                  { ID(yyTok) }
"/" =>                  { ID(yyTok) }
"\\/" =>                { ID(yyTok) }
"/\\" =>                { ID(yyTok) }
"\\" =>                 { ID(yyTok) }
"=>" =>                 { ID(yyTok) }
"<=" =>                 { ID(yyTok) }
">=" =>                 { ID(yyTok) }
"=<" =>                 { ID(yyTok) }
".=" =>                 { ID(yyTok) }
"=." =>                 { ID(yyTok) }
"%=" =>                 { ID(yyTok) }
"%%" =>                 { ID(yyTok) }
"@>" =>                 { ID(yyTok) }
"@=" =>                 { ID(yyTok) }
"@" =>                  { ID(yyTok) }
"@@" =>                 { ID(yyTok) }
"#" =>                  { ID(yyTok) }
">" =>                  { ID(yyTok) }
"<" =>                  { ID(yyTok) }
"-" =>                  { ID(yyTok) }
"-+" =>                 { ID(yyTok) }
"<>" =>                 { ID(yyTok) }

eof =>                  { TERM }
%%

tok2Num(token) => number%%token;

char2Num([''0,''c,C]) => charCode(C);

dequoteStr = {
  [] => []
| [''\\,''a,..L] => [''\a,..dequoteStr(L)]
| [''\\,''b,..L] => [''\b,..dequoteStr(L)]
| [''\\,''d,..L] => [''\d,..dequoteStr(L)]
| [''\\,''e,..L] => [''\e,..dequoteStr(L)]
| [''\\,''f,..L] => [''\f,..dequoteStr(L)]
| [''\\,''n,..L] => [''\n,..dequoteStr(L)]
| [''\\,''r,..L] => [''\r,..dequoteStr(L)]
| [''\\,''t,..L] => [''\t,..dequoteStr(L)]
| [''\\,''v,..L] => [''\v,..dequoteStr(L)]
| [''\\,''+,..L] => valof{
    (U,rL) = extractUnicode(L);
    valis [charOf(number%%([''0,''x,..U])),..dequoteStr(rL)]
  }
| [''\\,C,..L] => [C,..dequoteStr(L)]
| [C,..L] => [C,..dequoteStr(L)]
};
 
extractUnicode={
  ['';,..L]=>([],L)
| [] => ([],[])
| [C,..L] => valof{
    (U,rL) = extractUnicode(L);
    valis ([C,..U],rL)
  }
};
 
tok2Str([''\",..X]) => dequoteStr(front(X,listlen(X)-1));
tok2Sym([_,..X]) => dequoteStr(front(X,listlen(X)-1));
tok2Chr([_,..X]) => head(dequoteStr(X));
