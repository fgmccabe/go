/*
 * Generate the meta information for a class
 */

#include "go.ah";

module
import {
  interface "canon.af" and
  interface "display.af" and
  interface "canonlabel.af" and
  interface "misc.af" and
  interface <stdio.af> 
} in {

  -- Each class has a series of methods constructed automatically to handle reflection

  -- The following methods are defined:
  
  -- meta:[]=>meta.
  -- __meta:[list[thing,integer]+,list[thing,integer]-]=>meta

  -- the latter is an internal program that is used to handle variables

  -- __reflect:[meta+,thing-,list[(thing,integer)]+]{}.
  -- This succeeds if the meta term represents a valid representation of this class

  -- The definition of __meta, for a class constructor such as foo(A1,A2) is
  
  -- __meta(Vi,Vo) => cons('foo',[A1.__meta(Vi,Vx),A2.__meta(Vx,Vo)]).

  -- The standard classes also have a definition for __meta, with the one for thing being a
  -- little special:
  -- __meta(Vi,Vo)::var(this) => vrb(__pickVar(Vi,Vo)).
  -- __meta(Vi,Vi) => cons('thing',[]).

  -- The definition of meta is left to thing:
  -- meta() => __quantify(this.__meta([],Vr),Vr).

  -- The definition of __reflect for a particular class of arity k is 
  -- __reflect(cons(className,[M1,..,Mk]),className(A1,..,Ak),Vr) :-
  --   stdlib#__reflect(M1,A1,V2), ..., stdlib#__reflect(Mk,Ak,Vr).

  genMeta(Nd::(node(class(clName,_,clArity,Progs),_,Lc).=Nd),Opts,Map) => valof{
    if !noMeta in Opts && !metaDefined(Progs) then{
      
      prg(lName,_) .= unpackName(lookupClassName(Map,clName));

      thisVar = idnt(genNew("$this"));
      clVar = idnt(genNew("$cl"));

      if clArity>0 then{
        Vr : idnt(genNew("Vr"));
	Q: [Vr];
	A : [];
	M : [];

	mBody = collect{
	  for i in 1..clArity do{
	    Mx = idnt(genNew("Mx"));
	    Ax = idnt(genNew("Ax"));
	    elemis ocall(cons(trCons("__meta",2),[Vr,Mx]),Ax,Ax,Lc);
	    Q := [Mx,Ax,..Q];
	    A := [Ax,..A];
	    M := [Mx,..M];
	  }
	};

	mtName = lName<>"@__meta";

	As = rev(A);
	Ms = valof{
	  MM : cons(strct("go.stdlib#[]",0),[]);
	  for a in M do{
	    MM := cons(strct("go.stdlib#,..",2),[a,MM]);
	  };
	  valis MM;
	};

	mProg = clse(Q,As<>[cons(strct("go.stdlib#metaCons",2),[symb(lName),Ms]),Vr],
		     mBody,Lc);
	defineProg(Map,mtName,seqn([mProg]));

	rfName = lName<>"@___reflect";
	AA : As;
	reflectBody = collect{
	  for a in M do{
	    [V,..Va].=AA; AA := Va;
	    elemis ocall(cons(trCons("__reflect",2),[Vr,V]),a,a,Lc);
	  }
	};
	rfProg = valof{				  -- We need a very special hack here
	  if lName=="go.stdlib#metaCons" then{
	    xC = idnt(genNew("xC"));
	    xA = idnt(genNew("xA"));
	    xR = idnt(genNew("xR"));
	    xT = idnt(genNew("xT"));
	    valis clse([xC,xA,Vr,xR,xT],[xT,Vr,xR],
		       [defn(xT,cons(strct("go.stdlib#metaCons",2),[xC,xA]),Lc),
			ocall(cons(trCons("__reflect",2),[Vr,xR]),xC,xT,Lc)],Lc)
	  }
	  else
	    valis clse(Q,[cons(strct("go.stdlib#metaCons",2),[symb(lName),Ms]),
			  Vr,cons(strct(lName,listlen(As)),As)],
		       reflectBody,Lc)
	};
	defineProg(Map,rfName,seqn([rfProg]));

	-- sort out the additional entry for the class entry code

	mV = idnt(genNew("$Mt"));
	mX = idnt(genNew("$Mx"));

	valis [clse([thisVar,mV,Vr,..As],[cons(trCons("__meta",2),[Vr,mV]),
					  cons(strct(lName,listlen(As)),As),
					  thisVar],
		    [neck(Lc),call(prg(mtName,listlen(As)+2),As<>[mV,Vr],Lc)],Lc),
	       clse([thisVar,clVar,mV,Vr],[cons(trCons("__reflect",2),[Vr,mV]),clVar,thisVar],
		    [neck(Lc),call(prg(rfName,3),[thisVar,Vr,mV],Lc)],Lc)]
      }
      else{
	Vr = idnt(genNew("Vr"));
	mV = idnt(genNew("$Mt"));

	rfName = lName<>"@___reflect";

	rfProg = collect{				  -- We need a very special hack here
	  if lName=="go.stdlib#thing" then{
	    xC = idnt(genNew("xC"));
	    xR = idnt(genNew("xR"));
	    xT = idnt(genNew("xT"));
--	    elemis clse([],[xT,Vr,xR],[cal
	    elemis clse([xC,Vr,xR,xT],[xT,Vr,xR],
			[defn(xT,cons(strct("go.stdlib#metaSymbol",1),[xC]),Lc),
			ocall(cons(trCons("__reflect",2),[Vr,xR]),xC,xT,Lc)],Lc)
	  }
	  else
	      elemis clse([Vr],[cons(strct("go.stdlib#metaSymbol",1),
				     [symb(lName)]),
				Vr,symb(lName)],[],Lc)
	};
	defineProg(Map,rfName,seqn(rfProg));

	valis [clse([thisVar,Vr],
		    [cons(trCons("__meta",2),[Vr,
					      cons(strct("go.stdlib#metaSymbol",1),[symb(lName)])]),
		     symb(lName),thisVar],[neck(Lc)],Lc),
	       clse([thisVar,clVar,mV,Vr],[cons(trCons("__reflect",2),
						[Vr,mV]),clVar,thisVar],
		    [neck(Lc),call(prg(rfName,3),[thisVar,Vr,mV],Lc)],Lc)]
      }
    }
    else
      valis []
  };
    
  metaDefined(Progs) => valof{
    if node(clss(_,_,_,Body),_,_) in Progs && node(fun("__meta",_,_,_),_,_) in Body then
      valis true
    else
      valis false
  };

  trCons(Name,Arity) => strct(Name<>"%"<>Arity^0,Arity);
} export (genMeta)


