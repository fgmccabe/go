/*
 * Grammar file for UL
 */

%{

import ulex.

yyType ::= 
   N(integer)		-- number
 | I(string)		-- identifier
 | SEQ(yyType,yyType)		-- sequence of statements
 | EXIT			-- exit statement
 | PR(yyType)		-- print statement
 | ASS(string,yyType)	-- assignment statement
 | PL(yyType,yyType)		-- expressions
 | MI(yyType,yyType)
 | ST(yyType,yyType)
 | DV(yyType,yyType)
 | UM(yyType) .

%}

%token ID%{string%} INT%{integer%} SEMI EQUAL PRINT HALT LPAR RPAR
%left PLUS MINUS
%left STAR SLASH 
%nonassoc UMINUS
%start program

%%

 program : statements ;

statements : statements statement { SEQ($1,$2) }
 | statement
 ;

statement : assignment 
 | print
 | halt 
 ;

assignment : ID EQUAL exp SEMI { ASS($1,$3) }
 ;

print : PRINT exp SEMI { PR($2) }
 ;

halt : HALT SEMI { EXIT }
 ;

exp : ID 		{ I($1) }	-- Variable reference
 | INT			{ N($1) }
 | exp PLUS exp         { PL($1,$3) }	-- Arithmetic combination
 | exp MINUS exp        { MI($1,$3) }
 | exp STAR exp         { ST($1,$3) }
 | exp SLASH exp        { DV($1,$3) }
 | MINUS exp   %prec UMINUS  { UM($2) } 	-- unary minus
 | LPAR exp RPAR    	{ $2 } 		-- Parenthesised expression
 ;

%%

