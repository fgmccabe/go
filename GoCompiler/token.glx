/*
 * The standard tokenizer, expressed as a golex file
 */

import go.stdparse.

yyTokType ::= ID(symbol) | 
	  IN(integer) | 
	  FT(float) |
	  ST(string) |
	  SY(symbol) |
	  CH(char) |
	  LPAR |
	  RPAR |
	  LBRA | 
	  RBRA |
	  LBRCE |
	  RBRCE |
	  COMMA |
	  CONS |
          TERM |
	  EOF.

%%

 [ \n\t\b\r]+ => skip     	-- ignore white space

 "--"[^\n]*"\n"		       	-- line comment

 "/*" => <comment>        	-- long comment

  <comment> "*/" => <initial>
  <comment> .	         	-- implies a skip

  -- Different kinds of numbers

  [0-9]+				=> (IN(tok2int(yyTok)))

  [0-9]+("."[0-9]+([eE][-+]?[0-9]+)?) 	=> (FT(tok2float(yyTok)))

  "0x"[0-9a-fA-F]+		      	=> ( IN(tok2int(yyTok)))

  "0c"([^\\\"]|"\\"(("+"[0-9a-fA-F]+";")|[^+])) =>   (IN(tok2int(yyTok)))

-- Character rule
   "`"([^\\]|"\\"(("+"[0-9a-fA-F]+";")|[^+])) =>    ( CH(tok2chr(yyTok)) )
-- String rule
   "\""([^\\\"]|"\\"(("+"[0-9a-fA-F]+";")|[^+]))*"\"" => (ST(tok2str(yyTok)))

-- Symbol rule
   "'"([^\\']|"\\"(("+"[0-9a-fA-F]+";")|[^+]))*"'" => (SY(tok2sym(yyTok)))

-- Identifier rule (An approximation only)
  [a-zA-Z_][a-zA-Z_0-9]* => (ID(implode(yyTok)))

-- Punctuation and graphic operators
"(" =>			( LPAR )
")" =>			( RPAR )
"[" =>			( LBRA )
"]" =>			( RBRA )
"{" =>			( LBRCE)
"}" =>			( RBRCE )
";" =>                  ( ID(';') )
"," =>			( COMMA )
",.." =>		( CONS )
"."[ \t\b\r\n]+ =>	( TERM )
"."eof =>               ( TERM )
"." =>                  ( ID('.') )
"||" =>                 ( ID('||') )
"|" =>                  ( ID('|') )
"::" =>                 ( ID('::') )
"::=" =>                ( ID('::=') )
":=" =>                 ( ID(':=') )
":-" =>                 ( ID(':-') )
":--" =>                ( ID(':--') )
":" =>                  ( ID(':') )
"-->" =>                ( ID('-->') )
"->" =>                 ( ID('->') )
"<~" =>                 ( ID('<~') )
"~" =>                  ( ID('~') )
"^" =>                  ( ID('^') )
".." =>                 ( ID('..') )
"?" =>                  ( ID('?') )
"!" =>                  ( ID('!') )
"==" =>                 ( ID('==') )
"=" =>                  ( ID('=') )
"\\=" =>                ( ID('!=') )
"!=" =>                 ( ID('!=') )
"$=" =>                 ( ID('$=') )
"$" =>                  ( ID('$') )
"\\+" =>                ( ID('\\+') )
"+" =>                  ( ID('+') )
"++" =>                 ( ID('++') )
"*>" =>                 ( ID('*>') )
"**" =>                 ( ID('**') )
"*" =>                  ( ID('*') )
"/" =>                  ( ID('/') )
"\\/" =>                ( ID('\\/') )
"/\\" =>                ( ID('/\\') )
"\\" =>                 ( ID('\\') )
"=>" =>                 ( ID('=>') )
"<=" =>                 ( ID('<=') )
">=" =>                 ( ID('>=') )
"=<" =>                 ( ID('=<') )
".=" =>                 ( ID('.=') )
"=." =>                 ( ID('=.') )
"%=" =>                 ( ID('%=') )
"%%" =>                 ( ID('%%') )
"@>" =>                 ( ID('@>') )
"@=" =>                 ( ID('@=') )
"@" =>                  ( ID('@') )
"@@" =>                 ( ID('@@') )
"#" =>                  ( ID('#') )
">" =>                  ( ID('>') )
"<" =>                  ( ID('<') )
"-" =>                  ( ID('-') )
"-+" =>                 ( ID('-+') )
"<>" =>                 ( ID('<>') )

eof =>                  ( TERM )




%%

-- The postamble

  main(L) ->
	(S in L *>
	   Text  = getFile(S,unknownEncoding);
           Now = ticks();
	   Tokens = yyTokenizeAll(Text);
           Then = ticks();
	   stdout.outLine("parsed "<>listlen(Tokens).show()<>
                          " tokens in file "<>S<>" in "<>(Then-Now).show()<>
                          " seconds")).

	
  private tok2str:[string]=>string.

  tok2str([`",..X]) => dequoteStr(X,`").

  private dequoteStr:[string,char]=>string.

  dequoteStr([C],C)=>[].
  dequoteStr([],_) =>[].
  dequoteStr([`\\,`a,..L],C) => [`\a,..dequoteStr(L,C)].
  dequoteStr([`\\,`b,..L],C) => [`\b,..dequoteStr(L,C)].
  dequoteStr([`\\,`d,..L],C) => [`\d,..dequoteStr(L,C)].
  dequoteStr([`\\,`e,..L],C) => [`\e,..dequoteStr(L,C)].
  dequoteStr([`\\,`f,..L],C) => [`\f,..dequoteStr(L,C)].
  dequoteStr([`\\,`n,..L],C) => [`\n,..dequoteStr(L,C)].
  dequoteStr([`\\,`r,..L],C) => [`\r,..dequoteStr(L,C)].
  dequoteStr([`\\,`t,..L],C) => [`\t,..dequoteStr(L,C)].
  dequoteStr([`\\,`v,..L],C) => [`\v,..dequoteStr(L,C)].
  dequoteStr([`\\,`+,..L],C) => 
     valof{
       extractUnicode(L,U,rL);
       valis [__charOf(hexNum%%U),..dequoteStr(rL,C)]
     }.
  dequoteStr([`\\,X,..L],C) => [X,..dequoteStr(L,C)].
  dequoteStr([X,..L],C) => [X,..dequoteStr(L,C)].

  private extractUnicode:[string,string-,string-]*.
  extractUnicode([],[],[])->{}.
  extractUnicode([`;,..L],[],L)->{}.
  extractUnicode([C,..L],[C,..U],rL) -> extractUnicode(L,U,rL).

  private tok2int:[string]=>integer.
  tok2int(L)=>integerOf%%L.

  private tok2float:[string]=>float.
  tok2float(L)=>floatOf%%L.

  private tok2sym:[string]=>symbol.
  tok2sym([`',..L])=>implode(dequoteStr(L,`')).

  private tok2chr:[string]=>char.
  tok2chr([``,..L]) => dequoteStr(L,`\+ffff;).head().
