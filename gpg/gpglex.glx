/*
 * Lexical rules for the gpg parser
 */
import go.stdparse.

/*
 * Define the standard token forms
 */

yyTokType ::= TOKEN | LEFT | RIGHT | NONASSOC | PREC | EXPECT | START 
	  | ID(string)
          | INT(integer)
          | CENTBRACE(string)
          | BRACE(string)
          | COLON | BAR | SEMI | MARK | EOF .

%%

-- The rules for tokens for gpg

"%token" => 		( TOKEN )
"%left" => 		( LEFT )
"%right" => 		( RIGHT )
"%nonassoc" => 		( NONASSOC )
"%prec" => 		( PREC )
"%expect" => 		( EXPECT )
"%start" => 		( START )


-- identifier rule

[a-zA-Z_][a-zA-Z_0-9]* => ( ID(yyTok) )

-- integer rule

"-"?[0-9]+ => ( INT(integerOf%%yyTok) )

-- punctuation rules

-- preamble text marker
-- Accept anything between two %{ %} markers
"%{"([^%]*|"%"[^}])*"%}" => 	( CENTBRACE(trim(yyTok,2)) )

-- action text
"{"([^}]|"\n")*"}" => 	( BRACE(trim(yyTok,1)) )

":" => 			( COLON )
"|" => 			( BAR )
";" => 			( SEMI )
-- rule file marker
"%%" => 		( MARK )

-- White space and comments
[ \t\b\r\n]+      		-- ignore white space

"--"[^\n]*"\n"		       	-- line comment

"/*" => <comment>        	-- continuous comment

<comment> "*/" => <initial>
<comment> .|"\n"         	-- other characters in a comment are ignored

%%

private trim:[string,integer]=>string.
trim(S,C) => front(drop(S,C),listlen(S)-2*C).